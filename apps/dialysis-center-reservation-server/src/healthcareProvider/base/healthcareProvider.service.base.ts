/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  HealthcareProvider as PrismaHealthcareProvider,
  Booking as PrismaBooking,
} from "@prisma/client";

export class HealthcareProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HealthcareProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.healthcareProvider.count(args);
  }

  async healthcareProviders(
    args: Prisma.HealthcareProviderFindManyArgs
  ): Promise<PrismaHealthcareProvider[]> {
    return this.prisma.healthcareProvider.findMany(args);
  }
  async healthcareProvider(
    args: Prisma.HealthcareProviderFindUniqueArgs
  ): Promise<PrismaHealthcareProvider | null> {
    return this.prisma.healthcareProvider.findUnique(args);
  }
  async createHealthcareProvider(
    args: Prisma.HealthcareProviderCreateArgs
  ): Promise<PrismaHealthcareProvider> {
    return this.prisma.healthcareProvider.create(args);
  }
  async updateHealthcareProvider(
    args: Prisma.HealthcareProviderUpdateArgs
  ): Promise<PrismaHealthcareProvider> {
    return this.prisma.healthcareProvider.update(args);
  }
  async deleteHealthcareProvider(
    args: Prisma.HealthcareProviderDeleteArgs
  ): Promise<PrismaHealthcareProvider> {
    return this.prisma.healthcareProvider.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.healthcareProvider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
