/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DialysisCenter } from "./DialysisCenter";
import { DialysisCenterCountArgs } from "./DialysisCenterCountArgs";
import { DialysisCenterFindManyArgs } from "./DialysisCenterFindManyArgs";
import { DialysisCenterFindUniqueArgs } from "./DialysisCenterFindUniqueArgs";
import { CreateDialysisCenterArgs } from "./CreateDialysisCenterArgs";
import { UpdateDialysisCenterArgs } from "./UpdateDialysisCenterArgs";
import { DeleteDialysisCenterArgs } from "./DeleteDialysisCenterArgs";
import { DialysisCenterService } from "../dialysisCenter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DialysisCenter)
export class DialysisCenterResolverBase {
  constructor(
    protected readonly service: DialysisCenterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DialysisCenter",
    action: "read",
    possession: "any",
  })
  async _dialysisCentersMeta(
    @graphql.Args() args: DialysisCenterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DialysisCenter])
  @nestAccessControl.UseRoles({
    resource: "DialysisCenter",
    action: "read",
    possession: "any",
  })
  async dialysisCenters(
    @graphql.Args() args: DialysisCenterFindManyArgs
  ): Promise<DialysisCenter[]> {
    return this.service.dialysisCenters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DialysisCenter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DialysisCenter",
    action: "read",
    possession: "own",
  })
  async dialysisCenter(
    @graphql.Args() args: DialysisCenterFindUniqueArgs
  ): Promise<DialysisCenter | null> {
    const result = await this.service.dialysisCenter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DialysisCenter)
  @nestAccessControl.UseRoles({
    resource: "DialysisCenter",
    action: "create",
    possession: "any",
  })
  async createDialysisCenter(
    @graphql.Args() args: CreateDialysisCenterArgs
  ): Promise<DialysisCenter> {
    return await this.service.createDialysisCenter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DialysisCenter)
  @nestAccessControl.UseRoles({
    resource: "DialysisCenter",
    action: "update",
    possession: "any",
  })
  async updateDialysisCenter(
    @graphql.Args() args: UpdateDialysisCenterArgs
  ): Promise<DialysisCenter | null> {
    try {
      return await this.service.updateDialysisCenter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DialysisCenter)
  @nestAccessControl.UseRoles({
    resource: "DialysisCenter",
    action: "delete",
    possession: "any",
  })
  async deleteDialysisCenter(
    @graphql.Args() args: DeleteDialysisCenterArgs
  ): Promise<DialysisCenter | null> {
    try {
      return await this.service.deleteDialysisCenter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
